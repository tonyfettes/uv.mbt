package "tonyfettes/uv"

import(
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
)

// Values
fn accept[Server : ToStream, Client : ToStream](Server, Client) -> Unit!Errno

fn args() -> Array[String]

fn argv() -> Array[Bytes]

fn close[Handle : ToHandle](Handle, (Handle) -> Unit) -> Unit

fn cwd() -> String!Errno

fn disable_stdio_inheritance() -> Unit

fn errno(Int) -> Errno

fn fs_close(Loop, File, (Fs) -> Unit) -> Unit!Errno

fn fs_copyfile[Ntbs : ToNtbs](Loop, Ntbs, Ntbs, CopyFileFlags, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_mkdir[Ntbs : ToNtbs](Loop, Ntbs, Int, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_open[Ntbs : ToNtbs](Loop, Ntbs, OpenFlags, Int, (Fs, File) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_read(Loop, File, Array[@bytes.View], offset~ : Int64 = .., (Fs, Int) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_realpath[Ntbs : ToNtbs](Loop, Ntbs, (Fs, String) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_rename[Ntbs : ToNtbs](Loop, Ntbs, Ntbs, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_rmdir[Ntbs : ToNtbs](Loop, Ntbs, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_scandir[Ntbs : ToNtbs](Loop, Ntbs, Int, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_scandir_next(Fs) -> Dirent!Errno

fn fs_unlink[Ntbs : ToNtbs](Loop, Ntbs, (Fs) -> Unit, (Fs, Error) -> Unit) -> Unit!Errno

fn fs_write(Loop, File, Array[@bytes.View], offset~ : Int64 = .., (Fs, Int) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn getaddrinfo[Node : ToNtbs, Service : ToNtbs](Loop, (GetAddrInfo, Iter[AddrInfo]) -> Unit, (GetAddrInfo, Errno) -> Unit, Node, Service, hints? : AddrInfoHints) -> Unit!Errno

fn hrtime() -> UInt64

fn ip4_addr[Ntbs : ToNtbs](Ntbs, Int) -> SockaddrIn

fn ip_name(Sockaddr) -> String!Errno

fn is_closing[Handle : ToHandle](Handle) -> Bool

fn is_readable[Stream : ToStream](Stream) -> Bool

fn is_writable[Stream : ToStream](Stream) -> Bool

fn listen[Stream : ToStream](Stream, Int, (Stream) -> Unit, (Stream, Errno) -> Unit) -> Unit!Errno

fn os_uname() -> Utsname!Errno

fn pipe(Int, Int) -> (File, File)!Errno

fn queue_work(Loop, (Work) -> Unit, (Work) -> Unit, (Work, Errno) -> Unit) -> Unit!Errno

fn random(Loop, @bytes.View, Int, (Random, @bytes.View) -> Unit, (Random, Errno) -> Unit) -> Unit!Errno

fn read_start[Stream : ToStream](Stream, (Stream, Int) -> @bytes.View, (Stream, Int, @bytes.View) -> Unit, (Stream, Errno) -> Unit) -> Unit!Errno

fn read_stop[Stream : ToStream](Stream) -> Unit!Errno

fn run(Loop, RunMode) -> Unit!Errno

fn shutdown[Stream : ToStream](Stream, (Shutdown) -> Unit, (Shutdown, Errno) -> Unit) -> Unit!Errno

fn sleep(UInt) -> Unit

fn spawn(Loop, ProcessOptions) -> Process!Errno

fn stderr() -> File

fn stdin() -> File

fn stdout() -> File

fn stop(Loop) -> Unit

fn write[Stream : ToStream](Stream, Array[@bytes.View], (Write) -> Unit, (Write, Errno) -> Unit) -> Unit!Errno

// Types and methods
type AddrInfo
impl AddrInfo {
  addr(Self) -> Sockaddr
  canonname(Self) -> String?
  family(Self) -> AddressFamily!Errno
  protocol(Self) -> Protocol!Errno
  socktype(Self) -> SockType!Errno
}

type AddrInfoFlags
impl AddrInfoFlags {
  new(passive~ : Bool = .., canonname~ : Bool = .., numeric_host~ : Bool = .., numeric_serv~ : Bool = .., all~ : Bool = .., addrconfig~ : Bool = .., v4mapped~ : Bool = ..) -> Self
}

type AddrInfoHints
impl AddrInfoHints {
  new(flags? : AddrInfoFlags, family? : AddressFamily, socktype? : SockType, protocol? : Protocol) -> Self
}

pub enum AddressFamily {
  INET
  INET6
}
impl AddressFamily {
  inet() -> Self
  inet6() -> Self
}
impl Show for AddressFamily

type Connect
impl ToReq for Connect

type CopyFileFlags
impl CopyFileFlags {
  new(allow_exists~ : Bool = .., copy_on_write~ : CopyOnWrite = ..) -> Self
}

pub(all) enum CopyOnWrite {
  False
  True
  Force
}

type Dirent
impl Dirent {
  name(Self) -> String
  type_(Self) -> DirentType
}

pub enum DirentType {
  Unknown
  File
  Dir
  Link
  Fifo
  Socket
  Char
  Block
}
impl Show for DirentType
impl ToJson for DirentType

pub type! Errno Status
impl Eq for Errno
impl Hash for Errno
impl Show for Errno

type File

type Fs
impl ToReq for Fs

type GetAddrInfo

type Gid

type Handle
impl Handle {
  close(Self, (Self) -> Unit) -> Unit
  is_closing(Self) -> Bool
}

type Idle
impl Idle {
  new(Loop) -> Self!Errno
  start(Self, (Self) -> Unit) -> Unit!Errno
  stop(Self) -> Unit!Errno
}
impl ToHandle for Idle

type Loop
impl Loop {
  alive(Self) -> Bool
  close(Self) -> Unit!Errno
  fs_close(Self, File, (Fs) -> Unit) -> Unit!Errno
  fs_copyfile[Ntbs : ToNtbs](Self, Ntbs, Ntbs, CopyFileFlags, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
  fs_mkdir[Ntbs : ToNtbs](Self, Ntbs, Int, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
  fs_open[Ntbs : ToNtbs](Self, Ntbs, OpenFlags, Int, (Fs, File) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
  fs_read(Self, File, Array[@bytes.View], offset~ : Int64 = .., (Fs, Int) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
  fs_realpath[Ntbs : ToNtbs](Self, Ntbs, (Fs, String) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
  fs_rename[Ntbs : ToNtbs](Self, Ntbs, Ntbs, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
  fs_rmdir[Ntbs : ToNtbs](Self, Ntbs, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
  fs_scandir[Ntbs : ToNtbs](Self, Ntbs, Int, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
  fs_unlink[Ntbs : ToNtbs](Self, Ntbs, (Fs) -> Unit, (Fs, Error) -> Unit) -> Unit!Errno
  fs_write(Self, File, Array[@bytes.View], offset~ : Int64 = .., (Fs, Int) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
  getaddrinfo[Node : ToNtbs, Service : ToNtbs](Self, (GetAddrInfo, Iter[AddrInfo]) -> Unit, (GetAddrInfo, Errno) -> Unit, Node, Service, hints? : AddrInfoHints) -> Unit!Errno
  new() -> Self!Errno
  queue_work(Self, (Work) -> Unit, (Work) -> Unit, (Work, Errno) -> Unit) -> Unit!Errno
  random(Self, @bytes.View, Int, (Random, @bytes.View) -> Unit, (Random, Errno) -> Unit) -> Unit!Errno
  run(Self, RunMode) -> Unit!Errno
  spawn(Self, ProcessOptions) -> Process!Errno
  stop(Self) -> Unit
}

type Mutex
impl Mutex {
  lock(Self) -> Unit
  new() -> Self!Errno
  trylock(Self) -> Unit!Errno
  unlock(Self) -> Unit
}
impl Copy for Mutex

type OpenFlags
impl OpenFlags {
  read() -> Self
  read_write() -> Self
  write() -> Self
}

type Pipe
impl Pipe {
  bind[Ntbs : ToNtbs](Self, Ntbs, PipeBindFlags) -> Unit!Errno
  new(Loop, ipc~ : Bool = ..) -> Self!Errno
  to_handle(Self) -> Handle
  to_stream(Self) -> Stream
}
impl ToHandle for Pipe
impl ToStream for Pipe

type PipeBindFlags
impl PipeBindFlags {
  new(truncate~ : Bool = ..) -> Self
}

type Process
impl Process {
  kill(Self, Int) -> Unit!Errno
  pid(Self) -> Int
}
impl ToHandle for Process

type ProcessOptions
impl ProcessOptions {
  new[Ntbs : ToNtbs](Ntbs, Array[@string.StringView], env? : Array[@string.StringView], cwd? : @string.StringView, stdio? : Array[StdioContainer], uid? : Uid, gid? : Gid, (Process, Int64, Int) -> Unit) -> Self
}

pub enum Protocol {
  TCP
  UDP
}
impl Protocol {
  tcp() -> Self
  udp() -> Self
}
impl Show for Protocol

type Random

type Req

pub(all) enum RunMode {
  Default
  Once
  NoWait
}

type Shutdown
impl ToReq for Shutdown

type Signal
impl Signal {
  new(Loop) -> Self!Errno
  start(Self, (Self, Signum) -> Unit, Signum) -> Unit!Errno
  stop(Self) -> Unit!Errno
}

type Signum
impl Signum {
  sigabrt() -> Self
  sighup() -> Self
  sigint() -> Self
  sigpipe() -> Self?
  sigquit() -> Self
  sigterm() -> Self
  sigwinch() -> Self
}

type SockType
impl SockType {
  dgram() -> Self
  raw() -> Self
  stream() -> Self
}
impl Show for SockType

type Sockaddr
impl Sockaddr {
  ip_name(Self) -> String!Errno
}
impl ToSockaddr for Sockaddr

type SockaddrIn
impl ToSockaddr for SockaddrIn

pub enum Status {
  E2BIG
  EACCES
  EADDRINUSE
  EADDRNOTAVAIL
  EAFNOSUPPORT
  EAGAIN
  EAI_ADDRFAMILY
  EAI_AGAIN
  EAI_BADFLAGS
  EAI_BADHINTS
  EAI_CANCELED
  EAI_FAIL
  EAI_FAMILY
  EAI_MEMORY
  EAI_NODATA
  EAI_NONAME
  EAI_OVERFLOW
  EAI_PROTOCOL
  EAI_SERVICE
  EAI_SOCKTYPE
  EALREADY
  EBADF
  EBUSY
  ECANCELED
  ECHARSET
  ECONNABORTED
  ECONNREFUSED
  ECONNRESET
  EDESTADDRREQ
  EEXIST
  EFAULT
  EFBIG
  EHOSTUNREACH
  EINTR
  EINVAL
  EIO
  EISCONN
  EISDIR
  ELOOP
  EMFILE
  EMSGSIZE
  ENAMETOOLONG
  ENETDOWN
  ENETUNREACH
  ENFILE
  ENOBUFS
  ENODEV
  ENOENT
  ENOMEM
  ENONET
  ENOPROTOOPT
  ENOSPC
  ENOSYS
  ENOTCONN
  ENOTDIR
  ENOTEMPTY
  ENOTSOCK
  ENOTSUP
  EOVERFLOW
  EPERM
  EPIPE
  EPROTO
  EPROTONOSUPPORT
  EPROTOTYPE
  ERANGE
  EROFS
  ESHUTDOWN
  ESPIPE
  ESRCH
  ETIMEDOUT
  ETXTBSY
  EXDEV
  UNKNOWN
  EOF
  ENXIO
  EMLINK
  EHOSTDOWN
  EREMOTEIO
  ENOTTY
  EFTYPE
  EILSEQ
  ESOCKTNOSUPPORT
  ENODATA
  EUNATCH
  ENOEXEC
}
impl Eq for Status
impl Hash for Status

type StdioContainer
impl StdioContainer {
  create_pipe[Stream : ToStream](Stream, readable~ : Bool = .., writable~ : Bool = .., non_block~ : Bool = ..) -> Self
  ignore() -> Self
  inherit_file(File) -> Self
  inherit_stream(Stream) -> Self
}

type Stream
impl Stream {
  is_readable(Self) -> Bool
  is_writable(Self) -> Bool
  read_start(Self, (Handle, Int) -> @bytes.View, (Self, Int, @bytes.View) -> Unit, (Self, Errno) -> Unit) -> Unit!Errno
  read_stop(Self) -> Unit!Errno
  shutdown(Self, (Shutdown) -> Unit, (Shutdown, Errno) -> Unit) -> Unit!Errno
  to_handle(Self) -> Handle
  write(Self, Array[@bytes.View], (Write) -> Unit, (Write, Errno) -> Unit) -> Unit!Errno
}
impl ToHandle for Stream
impl ToStream for Stream

type Tcp
impl Tcp {
  bind[Sockaddr : ToSockaddr](Self, Sockaddr, TcpBindFlags) -> Unit!Errno
  connect[Sockaddr : ToSockaddr](Self, Sockaddr, (Connect) -> Unit, (Connect, Errno) -> Unit) -> Unit!Errno
  new(Loop) -> Self!Errno
}
impl ToHandle for Tcp
impl ToStream for Tcp

type TcpBindFlags
impl TcpBindFlags {
  new(ipv6_only~ : Bool = .., reuse_port~ : Bool = ..) -> Self
}

type Timer
impl Timer {
  get_due_in(Self) -> UInt64
  get_repeat(Self) -> UInt64
  new(Loop) -> Self!Errno
  set_repeat(Self, UInt64) -> Unit
  start(Self, timeout~ : UInt64, repeat~ : UInt64, (Self) -> Unit) -> Unit!Errno
  stop(Self) -> Unit!Errno
}
impl ToHandle for Timer

type Tty
impl Tty {
  new(Loop, File) -> Self!Errno
  reset_mode() -> Unit!Errno
  set_mode(Self, TtyMode) -> Unit!Errno
}
impl ToHandle for Tty
impl ToStream for Tty

type TtyMode
impl TtyMode {
  io() -> Self
  normal() -> Self
  raw() -> Self
  raw_vt() -> Self
}

type Udp
impl Udp {
  bind[Sockaddr : ToSockaddr](Self, Sockaddr, UdpFlags) -> Unit!Errno
  connect[Sockaddr : ToSockaddr](Self, Sockaddr) -> Unit!Errno
  new(Loop) -> Self!Errno
  recv_start(Self, (Handle, Int) -> @bytes.View, (Self, Int, @bytes.View, Sockaddr, UdpFlags) -> Unit, (Self, Errno) -> Unit) -> Unit!Errno
  recv_stop(Self) -> Unit!Errno
  send[Sockaddr : ToSockaddr](Self, Array[@bytes.View], (UdpSend) -> Unit, (UdpSend, Errno) -> Unit, addr? : Sockaddr) -> Unit!Errno
}
impl ToHandle for Udp

type UdpFlags
impl UdpFlags {
  new() -> Self
}

type UdpSend
impl ToReq for UdpSend

type Uid

type Utsname
impl Utsname {
  machine(Self) -> String
  release(Self) -> String
  sysname(Self) -> String
  version(Self) -> String
}

type Work

type Write
impl ToReq for Write

// Type aliases

// Traits
pub trait Copy {
  copy(Self) -> Self
}

pub trait ToHandle {
  to_handle(Self) -> Handle
  of_handle(Handle) -> Self
  close(Self, (Self) -> Unit) -> Unit
  is_closing(Self) -> Bool
}

pub(open) trait ToNtbs {
  to_ntbs(Self) -> Bytes
}
impl ToNtbs for String
impl ToNtbs for Bytes
impl ToNtbs for @bytes.View
impl ToNtbs for @string.StringView

pub trait ToReq {
  to_req(Self) -> Req
}

trait ToSockaddr

pub trait ToStream : ToHandle {
  to_stream(Self) -> Stream
  of_stream(Stream) -> Self
  read_start(Self, (Self, Int) -> @bytes.View, (Self, Int, @bytes.View) -> Unit, (Self, Errno) -> Unit) -> Unit!Errno
  read_stop(Self) -> Unit!Errno
  write(Self, Array[@bytes.View], (Write) -> Unit, (Write, Errno) -> Unit) -> Unit!Errno
  listen(Self, Int, (Self) -> Unit, (Self, Errno) -> Unit) -> Unit!Errno
  is_readable(Self) -> Bool
  is_writable(Self) -> Bool
  shutdown(Self, (Shutdown) -> Unit, (Shutdown, Errno) -> Unit) -> Unit!Errno
}

