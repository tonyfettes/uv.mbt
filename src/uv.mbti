package "tonyfettes/uv"

import(
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
)

// Values
fn[Server : ToStream, Client : ToStream] accept(Server, Client) -> Unit!Errno

fn args() -> Array[String]

fn argv() -> Array[Bytes]

fn[Handle : ToHandle] close(Handle, (Handle) -> Unit) -> Unit

fn cwd() -> String!Errno

fn disable_stdio_inheritance() -> Unit

fn errno(Int) -> Errno

fn[Ntbs : ToNtbs] fs_access(Loop, Ntbs, AccessFlags, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_close(Loop, File, (Fs) -> Unit) -> Unit!Errno

fn[Ntbs : ToNtbs] fs_copyfile(Loop, Ntbs, Ntbs, CopyFileFlags, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_fstat(Loop, File, (Fs, Stat) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn[Ntbs : ToNtbs] fs_lstat(Loop, Ntbs, (Fs, Stat) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn[Ntbs : ToNtbs] fs_mkdir(Loop, Ntbs, Int, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn[Ntbs : ToNtbs] fs_open(Loop, Ntbs, OpenFlags, Int, (Fs, File) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_read(Loop, File, Array[@bytes.View], offset~ : Int64 = .., (Fs, Int) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn[Ntbs : ToNtbs] fs_realpath(Loop, Ntbs, (Fs, String) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn[Ntbs : ToNtbs] fs_rename(Loop, Ntbs, Ntbs, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn[Ntbs : ToNtbs] fs_rmdir(Loop, Ntbs, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn[Ntbs : ToNtbs] fs_scandir(Loop, Ntbs, Int, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn fs_scandir_next(Fs) -> Dirent!Errno

fn[Ntbs : ToNtbs] fs_stat(Loop, Ntbs, (Fs, Stat) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn[Ntbs : ToNtbs] fs_unlink(Loop, Ntbs, (Fs) -> Unit, (Fs, Error) -> Unit) -> Unit!Errno

fn fs_write(Loop, File, Array[@bytes.View], offset~ : Int64 = .., (Fs, Int) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno

fn[Node : ToNtbs, Service : ToNtbs] getaddrinfo(Loop, (GetAddrInfo, Iter[AddrInfo]) -> Unit, (GetAddrInfo, Errno) -> Unit, Node, Service, hints? : AddrInfoHints) -> Unit!Errno

fn hrtime() -> UInt64

fn[Ntbs : ToNtbs] ip4_addr(Ntbs, Int) -> SockaddrIn

fn ip_name(Sockaddr) -> String!Errno

fn[Handle : ToHandle] is_closing(Handle) -> Bool

fn[Stream : ToStream] is_readable(Stream) -> Bool

fn[Stream : ToStream] is_writable(Stream) -> Bool

fn[Stream : ToStream] listen(Stream, Int, (Stream) -> Unit, (Stream, Errno) -> Unit) -> Unit!Errno

fn os_uname() -> Utsname!Errno

fn pipe(Int, Int) -> (File, File)!Errno

fn queue_work(Loop, (Work) -> Unit, (Work) -> Unit, (Work, Errno) -> Unit) -> Unit!Errno

fn random(Loop, @bytes.View, Int, (Random, @bytes.View) -> Unit, (Random, Errno) -> Unit) -> Unit!Errno

fn[Stream : ToStream] read_start(Stream, (Stream, Int) -> @bytes.View, (Stream, Int, @bytes.View) -> Unit, (Stream, Errno) -> Unit) -> Unit!Errno

fn[Stream : ToStream] read_stop(Stream) -> Unit!Errno

fn run(Loop, RunMode) -> Unit!Errno

fn[Stream : ToStream] shutdown(Stream, (Shutdown) -> Unit, (Shutdown, Errno) -> Unit) -> Unit!Errno

fn sleep(UInt) -> Unit

fn spawn(Loop, ProcessOptions) -> Process!Errno

fn stderr() -> File

fn stdin() -> File

fn stdout() -> File

fn stop(Loop) -> Unit

fn[Stream : ToStream] write(Stream, Array[@bytes.View], (Write) -> Unit, (Write, Errno) -> Unit) -> Unit!Errno

// Types and methods
type AccessFlags
fn AccessFlags::new(read~ : Bool = .., write~ : Bool = .., execute~ : Bool = ..) -> Self

type AddrInfo
fn AddrInfo::addr(Self) -> Sockaddr
fn AddrInfo::canonname(Self) -> String?
fn AddrInfo::family(Self) -> AddressFamily!Errno
fn AddrInfo::protocol(Self) -> Protocol!Errno
fn AddrInfo::socktype(Self) -> SockType!Errno

type AddrInfoFlags
fn AddrInfoFlags::new(passive~ : Bool = .., canonname~ : Bool = .., numeric_host~ : Bool = .., numeric_serv~ : Bool = .., all~ : Bool = .., addrconfig~ : Bool = .., v4mapped~ : Bool = ..) -> Self

type AddrInfoHints
fn AddrInfoHints::new(flags? : AddrInfoFlags, family? : AddressFamily, socktype? : SockType, protocol? : Protocol) -> Self

pub enum AddressFamily {
  INET
  INET6
}
fn AddressFamily::inet() -> Self
fn AddressFamily::inet6() -> Self
impl Show for AddressFamily

type Connect
impl ToReq for Connect

type CopyFileFlags
fn CopyFileFlags::new(allow_exists~ : Bool = .., copy_on_write~ : CopyOnWrite = ..) -> Self

pub(all) enum CopyOnWrite {
  False
  True
  Force
}

type Dirent
fn Dirent::name(Self) -> String
fn Dirent::type_(Self) -> DirentType

pub enum DirentType {
  Unknown
  File
  Dir
  Link
  Fifo
  Socket
  Char
  Block
}
impl Show for DirentType
impl ToJson for DirentType

pub type! Errno Status
impl Eq for Errno
impl Hash for Errno
impl Show for Errno

type File

type Fs
impl ToReq for Fs

type FsEvent
fn FsEvent::get_path(Self) -> String!Errno
fn FsEvent::new(Loop) -> Self!Errno
fn FsEvent::start(Self, String, FsEventFlags, (Self, String?, Array[FsEventType]) -> Unit, (Self, String?, Errno) -> Unit) -> Unit!Errno
fn FsEvent::stop(Self) -> Unit!Errno
impl ToHandle for FsEvent

type FsEventFlags
fn FsEventFlags::new(recursive~ : Bool = ..) -> Self

pub enum FsEventType {
  Rename
  Change
}
impl Show for FsEventType
impl ToJson for FsEventType

type GetAddrInfo

type Gid

type Handle
fn Handle::close(Self, (Self) -> Unit) -> Unit
fn Handle::is_closing(Self) -> Bool

type Idle
fn Idle::new(Loop) -> Self!Errno
fn Idle::start(Self, (Self) -> Unit) -> Unit!Errno
fn Idle::stop(Self) -> Unit!Errno
impl ToHandle for Idle

type Loop
fn Loop::alive(Self) -> Bool
fn Loop::close(Self) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_access(Self, Ntbs, AccessFlags, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn Loop::fs_close(Self, File, (Fs) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_copyfile(Self, Ntbs, Ntbs, CopyFileFlags, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn Loop::fs_fstat(Self, File, (Fs, Stat) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_lstat(Self, Ntbs, (Fs, Stat) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_mkdir(Self, Ntbs, Int, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_open(Self, Ntbs, OpenFlags, Int, (Fs, File) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn Loop::fs_read(Self, File, Array[@bytes.View], offset~ : Int64 = .., (Fs, Int) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_realpath(Self, Ntbs, (Fs, String) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_rename(Self, Ntbs, Ntbs, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_rmdir(Self, Ntbs, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_scandir(Self, Ntbs, Int, (Fs) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_stat(Self, Ntbs, (Fs, Stat) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Ntbs : ToNtbs] Loop::fs_unlink(Self, Ntbs, (Fs) -> Unit, (Fs, Error) -> Unit) -> Unit!Errno
fn Loop::fs_write(Self, File, Array[@bytes.View], offset~ : Int64 = .., (Fs, Int) -> Unit, (Fs, Errno) -> Unit) -> Unit!Errno
fn[Node : ToNtbs, Service : ToNtbs] Loop::getaddrinfo(Self, (GetAddrInfo, Iter[AddrInfo]) -> Unit, (GetAddrInfo, Errno) -> Unit, Node, Service, hints? : AddrInfoHints) -> Unit!Errno
fn Loop::new() -> Self!Errno
fn Loop::queue_work(Self, (Work) -> Unit, (Work) -> Unit, (Work, Errno) -> Unit) -> Unit!Errno
fn Loop::random(Self, @bytes.View, Int, (Random, @bytes.View) -> Unit, (Random, Errno) -> Unit) -> Unit!Errno
fn Loop::run(Self, RunMode) -> Unit!Errno
fn Loop::spawn(Self, ProcessOptions) -> Process!Errno
fn Loop::stop(Self) -> Unit

type Mutex
fn Mutex::lock(Self) -> Unit
fn Mutex::new() -> Self!Errno
fn Mutex::trylock(Self) -> Unit!Errno
fn Mutex::unlock(Self) -> Unit
impl Copy for Mutex

type OpenFlags
fn OpenFlags::read(create~ : Bool = ..) -> Self
fn OpenFlags::read_write(create~ : Bool = ..) -> Self
fn OpenFlags::write(create~ : Bool = ..) -> Self

type Pipe
fn[Ntbs : ToNtbs] Pipe::bind(Self, Ntbs, PipeBindFlags) -> Unit!Errno
fn Pipe::new(Loop, ipc~ : Bool = ..) -> Self!Errno
fn Pipe::to_handle(Self) -> Handle
fn Pipe::to_stream(Self) -> Stream
impl ToHandle for Pipe
impl ToStream for Pipe

type PipeBindFlags
fn PipeBindFlags::new(truncate~ : Bool = ..) -> Self

type Process
fn Process::kill(Self, Signum) -> Unit!Errno
fn Process::pid(Self) -> Int
impl ToHandle for Process

type ProcessOptions
fn[Ntbs : ToNtbs] ProcessOptions::new(Ntbs, Array[@string.StringView], env? : Array[@string.StringView], cwd? : @string.StringView, stdio? : Array[StdioContainer], uid? : Uid, gid? : Gid, (Process, Int64, Int) -> Unit) -> Self

pub enum Protocol {
  TCP
  UDP
}
fn Protocol::tcp() -> Self
fn Protocol::udp() -> Self
impl Show for Protocol

type Random

type Req

pub(all) enum RunMode {
  Default
  Once
  NoWait
}

type Shutdown
impl ToReq for Shutdown

type Signal
fn Signal::new(Loop) -> Self!Errno
fn Signal::start(Self, (Self, Signum) -> Unit, Signum) -> Unit!Errno
fn Signal::stop(Self) -> Unit!Errno

type Signum
fn Signum::sigabrt() -> Self
fn Signum::sighup() -> Self
fn Signum::sigint() -> Self
fn Signum::sigpipe() -> Self!Errno
fn Signum::sigquit() -> Self
fn Signum::sigterm() -> Self
fn Signum::sigwinch() -> Self

type SockType
fn SockType::dgram() -> Self
fn SockType::raw() -> Self
fn SockType::stream() -> Self
impl Show for SockType

type Sockaddr
fn Sockaddr::ip_name(Self) -> String!Errno
impl ToSockaddr for Sockaddr

type SockaddrIn
impl ToSockaddr for SockaddrIn

type Stat
fn Stat::atim_nsec(Self) -> Int64
fn Stat::atim_sec(Self) -> Int64
fn Stat::birthtim_nsec(Self) -> Int64
fn Stat::birthtim_sec(Self) -> Int64
fn Stat::blksize(Self) -> UInt64
fn Stat::blocks(Self) -> UInt64
fn Stat::ctim_nsec(Self) -> Int64
fn Stat::ctim_sec(Self) -> Int64
fn Stat::dev(Self) -> UInt64
fn Stat::flags(Self) -> UInt64
fn Stat::gen(Self) -> UInt64
fn Stat::gid(Self) -> UInt64
fn Stat::ino(Self) -> UInt64
fn Stat::is_block_device(Self) -> Bool!Errno
fn Stat::is_character_device(Self) -> Bool
fn Stat::is_directory(Self) -> Bool
fn Stat::is_file(Self) -> Bool
fn Stat::is_pipe(Self) -> Bool
fn Stat::is_socket(Self) -> Bool!Errno
fn Stat::is_symlink(Self) -> Bool
fn Stat::mode(Self) -> UInt64
fn Stat::mtim_nsec(Self) -> Int64
fn Stat::mtim_sec(Self) -> Int64
fn Stat::nlink(Self) -> UInt64
fn Stat::rdev(Self) -> UInt64
fn Stat::size(Self) -> UInt64
fn Stat::uid(Self) -> UInt64

pub enum Status {
  E2BIG
  EACCES
  EADDRINUSE
  EADDRNOTAVAIL
  EAFNOSUPPORT
  EAGAIN
  EAI_ADDRFAMILY
  EAI_AGAIN
  EAI_BADFLAGS
  EAI_BADHINTS
  EAI_CANCELED
  EAI_FAIL
  EAI_FAMILY
  EAI_MEMORY
  EAI_NODATA
  EAI_NONAME
  EAI_OVERFLOW
  EAI_PROTOCOL
  EAI_SERVICE
  EAI_SOCKTYPE
  EALREADY
  EBADF
  EBUSY
  ECANCELED
  ECHARSET
  ECONNABORTED
  ECONNREFUSED
  ECONNRESET
  EDESTADDRREQ
  EEXIST
  EFAULT
  EFBIG
  EHOSTUNREACH
  EINTR
  EINVAL
  EIO
  EISCONN
  EISDIR
  ELOOP
  EMFILE
  EMSGSIZE
  ENAMETOOLONG
  ENETDOWN
  ENETUNREACH
  ENFILE
  ENOBUFS
  ENODEV
  ENOENT
  ENOMEM
  ENONET
  ENOPROTOOPT
  ENOSPC
  ENOSYS
  ENOTCONN
  ENOTDIR
  ENOTEMPTY
  ENOTSOCK
  ENOTSUP
  EOVERFLOW
  EPERM
  EPIPE
  EPROTO
  EPROTONOSUPPORT
  EPROTOTYPE
  ERANGE
  EROFS
  ESHUTDOWN
  ESPIPE
  ESRCH
  ETIMEDOUT
  ETXTBSY
  EXDEV
  UNKNOWN
  EOF
  ENXIO
  EMLINK
  EHOSTDOWN
  EREMOTEIO
  ENOTTY
  EFTYPE
  EILSEQ
  ESOCKTNOSUPPORT
  ENODATA
  EUNATCH
  ENOEXEC
}
impl Eq for Status
impl Hash for Status

type StdioContainer
fn[Stream : ToStream] StdioContainer::create_pipe(Stream, readable~ : Bool = .., writable~ : Bool = .., non_block~ : Bool = ..) -> Self
fn StdioContainer::ignore() -> Self
fn StdioContainer::inherit_file(File) -> Self
fn StdioContainer::inherit_stream(Stream) -> Self

type Stream
fn Stream::is_readable(Self) -> Bool
fn Stream::is_writable(Self) -> Bool
fn Stream::read_start(Self, (Handle, Int) -> @bytes.View, (Self, Int, @bytes.View) -> Unit, (Self, Errno) -> Unit) -> Unit!Errno
fn Stream::read_stop(Self) -> Unit!Errno
fn Stream::shutdown(Self, (Shutdown) -> Unit, (Shutdown, Errno) -> Unit) -> Unit!Errno
fn Stream::to_handle(Self) -> Handle
fn Stream::write(Self, Array[@bytes.View], (Write) -> Unit, (Write, Errno) -> Unit) -> Unit!Errno
impl ToHandle for Stream
impl ToStream for Stream

type Tcp
fn[Sockaddr : ToSockaddr] Tcp::bind(Self, Sockaddr, TcpBindFlags) -> Unit!Errno
fn[Sockaddr : ToSockaddr] Tcp::connect(Self, Sockaddr, (Connect) -> Unit, (Connect, Errno) -> Unit) -> Unit!Errno
fn Tcp::new(Loop) -> Self!Errno
impl ToHandle for Tcp
impl ToStream for Tcp

type TcpBindFlags
fn TcpBindFlags::new(ipv6_only~ : Bool = .., reuse_port~ : Bool = ..) -> Self

type Thread
fn Thread::current() -> Self
fn Thread::equal(Self, Self) -> Bool
fn Thread::join(Self) -> Unit!Errno
fn Thread::new(() -> Unit) -> Self!Errno
impl Copy for Thread

type Timer
fn Timer::get_due_in(Self) -> UInt64
fn Timer::get_repeat(Self) -> UInt64
fn Timer::new(Loop) -> Self!Errno
fn Timer::set_repeat(Self, UInt64) -> Unit
fn Timer::start(Self, timeout~ : UInt64, repeat~ : UInt64, (Self) -> Unit) -> Unit!Errno
fn Timer::stop(Self) -> Unit!Errno
impl ToHandle for Timer

type Tty
fn Tty::new(Loop, File) -> Self!Errno
fn Tty::reset_mode() -> Unit!Errno
fn Tty::set_mode(Self, TtyMode) -> Unit!Errno
impl ToHandle for Tty
impl ToStream for Tty

type TtyMode
fn TtyMode::io() -> Self
fn TtyMode::normal() -> Self
fn TtyMode::raw() -> Self
fn TtyMode::raw_vt() -> Self

type Udp
fn[Sockaddr : ToSockaddr] Udp::bind(Self, Sockaddr, UdpFlags) -> Unit!Errno
fn[Sockaddr : ToSockaddr] Udp::connect(Self, Sockaddr) -> Unit!Errno
fn Udp::new(Loop) -> Self!Errno
fn Udp::recv_start(Self, (Handle, Int) -> @bytes.View, (Self, Int, @bytes.View, Sockaddr, UdpFlags) -> Unit, (Self, Errno) -> Unit) -> Unit!Errno
fn Udp::recv_stop(Self) -> Unit!Errno
fn[Sockaddr : ToSockaddr] Udp::send(Self, Array[@bytes.View], (UdpSend) -> Unit, (UdpSend, Errno) -> Unit, addr? : Sockaddr) -> Unit!Errno
impl ToHandle for Udp

type UdpFlags
fn UdpFlags::new() -> Self

type UdpSend
impl ToReq for UdpSend

type Uid

type Utsname
fn Utsname::machine(Self) -> String
fn Utsname::release(Self) -> String
fn Utsname::sysname(Self) -> String
fn Utsname::version(Self) -> String

type Work

type Write
impl ToReq for Write

// Type aliases

// Traits
pub trait Copy {
  copy(Self) -> Self
}

pub trait ToHandle {
  to_handle(Self) -> Handle
  of_handle(Handle) -> Self
  close(Self, (Self) -> Unit) -> Unit
  is_closing(Self) -> Bool
}

pub(open) trait ToNtbs {
  to_ntbs(Self) -> Bytes
}
impl ToNtbs for String
impl ToNtbs for Bytes
impl ToNtbs for @bytes.View
impl ToNtbs for @string.StringView

pub trait ToReq {
  to_req(Self) -> Req
}

trait ToSockaddr

pub trait ToStream : ToHandle {
  to_stream(Self) -> Stream
  of_stream(Stream) -> Self
  read_start(Self, (Self, Int) -> @bytes.View, (Self, Int, @bytes.View) -> Unit, (Self, Errno) -> Unit) -> Unit!Errno
  read_stop(Self) -> Unit!Errno
  write(Self, Array[@bytes.View], (Write) -> Unit, (Write, Errno) -> Unit) -> Unit!Errno
  listen(Self, Int, (Self) -> Unit, (Self, Errno) -> Unit) -> Unit!Errno
  is_readable(Self) -> Bool
  is_writable(Self) -> Bool
  shutdown(Self, (Shutdown) -> Unit, (Shutdown, Errno) -> Unit) -> Unit!Errno
}

