package "tonyfettes/uv/sync"

import(
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
  "tonyfettes/encoding"
)

// Values
fn[T] backtrace(loc~ : SourceLoc = _, () -> T raise) -> T raise

fn[ToPath : ToPath] path(ToPath) -> &ToPath

fn[ToPosixPath : ToPosixPath] posix_path(ToPosixPath) -> &ToPosixPath

fn[ToWindowsPath : ToWindowsPath] windows_path(ToWindowsPath) -> &ToWindowsPath

// Types and methods
type File
fn File::close(Self, loc~ : SourceLoc = _) -> Unit raise
impl Readable for File
impl Writable for File

type Iter[T]
fn[T, U] Iter::bind(Self[T], (T) -> U? raise) -> Self[U]
fn Iter::bytes(Self[@bytes.View]) -> Bytes raise
fn[T] Iter::collect(Self[T]) -> Array[T] raise
fn Iter::decode(Self[@bytes.View], encoding~ : @encoding.Encoding) -> Self[String]
fn[T] Iter::each(Self[T], (T) -> Unit raise) -> Unit raise
fn[T] Iter::filter(Self[T], (T) -> Bool raise) -> Self[T]
fn Iter::text(Self[@bytes.View], encoding~ : @encoding.Encoding = ..) -> String raise

type Path
fn Path::access(Self, read~ : Bool = .., write~ : Bool = .., execute~ : Bool = .., loc~ : SourceLoc = _) -> Unit raise
fn Path::anchor(Self) -> @string.StringView
fn Path::drive(Self) -> @string.StringView
fn Path::exists(Self, loc~ : SourceLoc = _) -> Bool raise
fn[ToPath : ToPath] Path::join(Self, ToPath) -> Self
fn Path::name(Self) -> @string.StringView?
fn[ToPath : ToPath] Path::new(ToPath) -> Self
fn Path::open(Self, loc~ : SourceLoc = _) -> File raise
fn Path::parent(Self) -> Self?
fn Path::parse(@string.StringView) -> Self
fn Path::parse_posix(@string.StringView) -> Self
fn Path::parse_windows(@string.StringView) -> Self
fn Path::parts(Self) -> ArrayView[@string.StringView]
fn[ToPosixPath : ToPosixPath] Path::posix(ToPosixPath) -> Self
fn Path::read(Self, loc~ : SourceLoc = _) -> Iter[@bytes.View] raise
fn[ToPath : ToPath] Path::relative_to(Self, ToPath) -> Self
fn Path::rmdir(Self, loc~ : SourceLoc = _) -> Unit raise
fn Path::root(Self) -> @string.StringView
fn Path::stat(Self, loc~ : SourceLoc = _) -> Stat raise
fn Path::suffix(Self) -> @string.StringView?
fn Path::to_posix_path(Self) -> Self
fn Path::to_windows_path(Self) -> Self
fn Path::unlink(Self, loc~ : SourceLoc = _) -> Unit raise
fn[ToWindowsPath : ToWindowsPath] Path::windows(ToWindowsPath) -> Self
fn Path::write(Self, Iter[@bytes.View], loc~ : SourceLoc = _) -> Unit raise
impl Compare for Path
impl Eq for Path
impl Hash for Path
impl Show for Path
impl ToJson for Path
impl Readable for Path
impl ToPath for Path
impl Writable for Path

type Stat
fn Stat::is_dir(Self) -> Bool
fn Stat::is_file(Self) -> Bool

fn ToPath::anchor(&Self) -> @string.StringView
fn ToPath::drive(&Self) -> @string.StringView
fn[ToPath : ToPath] ToPath::join(&Self, ToPath) -> &Self
fn ToPath::name(&Self) -> @string.StringView?
fn[ToPath : ToPath] ToPath::new(ToPath) -> &Self
fn ToPath::parent(&Self) -> &Self?
fn ToPath::parts(&Self) -> ArrayView[@string.StringView]
fn ToPath::relative_to(&Self, &Self) -> &Self
fn ToPath::root(&Self) -> @string.StringView
fn ToPath::suffix(&Self) -> @string.StringView?
fn ToPath::to_posix_path(&Self) -> &ToPosixPath
fn ToPath::to_windows_path(&Self) -> &ToWindowsPath
impl Compare for &ToPath
impl Div for &ToPath
impl Eq for &ToPath
impl Hash for &ToPath
impl Show for &ToPath
impl ToJson for &ToPath

fn ToPosixPath::anchor(&Self) -> @string.StringView
fn[ToPosixPath : ToPosixPath] ToPosixPath::new(ToPosixPath) -> &Self
fn ToPosixPath::parent(&Self) -> &Self?
fn ToPosixPath::parts(&Self) -> ArrayView[@string.StringView]
fn ToPosixPath::relative_to(&Self, &Self) -> &Self
fn ToPosixPath::root(&Self) -> @string.StringView
fn ToPosixPath::to_path(&Self) -> &ToPath
fn ToPosixPath::to_windows_path(&Self) -> &ToWindowsPath
impl Div for &ToPosixPath
impl Show for &ToPosixPath
impl ToJson for &ToPosixPath

fn ToWindowsPath::anchor(&Self) -> @string.StringView
fn ToWindowsPath::drive(&Self) -> @string.StringView
fn[ToWindowsPath : ToWindowsPath] ToWindowsPath::new(ToWindowsPath) -> &Self
fn ToWindowsPath::parent(&Self) -> &Self?
fn ToWindowsPath::parts(&Self) -> ArrayView[@string.StringView]
fn ToWindowsPath::relative_to(&Self, &Self) -> &Self
fn ToWindowsPath::root(&Self) -> @string.StringView
fn ToWindowsPath::to_posix_path(&Self) -> &ToPosixPath
impl Div for &ToWindowsPath
impl Show for &ToWindowsPath
impl ToJson for &ToWindowsPath

// Type aliases
pub typealias PosixPath = &ToPosixPath

pub typealias WindowsPath = &ToWindowsPath

// Traits
pub trait Readable {
  read(Self) -> Iter[@bytes.View] raise
  read_text(Self, encoding~ : @encoding.Encoding) -> String raise
  read_bytes(Self) -> Bytes raise
}

pub trait ToPath {
  to_path(Self) -> Path
}
impl ToPath for String
impl[T : ToPath] ToPath for Array[T]
impl[T : ToPath] ToPath for ArrayView[T]
impl ToPath for @string.StringView
impl ToPath for &ToPosixPath
impl ToPath for &ToWindowsPath

trait ToPosixPath
impl ToPosixPath for String
impl ToPosixPath for @string.StringView
impl ToPosixPath for &ToPath

trait ToWindowsPath
impl ToWindowsPath for String
impl ToWindowsPath for @string.StringView
impl ToWindowsPath for &ToPath

pub trait Writable {
  write(Self, Iter[@bytes.View]) -> Unit raise
  write_text(Self, @string.StringView, encoding~ : @encoding.Encoding) -> Unit raise
  write_bytes(Self, @bytes.View) -> Unit raise
}

