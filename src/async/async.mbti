package "tonyfettes/uv/async"

import(
  "moonbitlang/core/buffer"
  "moonbitlang/core/bytes"
  "moonbitlang/core/json"
  "moonbitlang/core/string"
  "tonyfettes/encoding"
)

// Values
fn cwd() -> &ToPath!

fn[Input : ToPath] path(Input) -> &ToPath

async fn read_text(&ToPath, encoding~ : @encoding.Encoding = ..) -> String!

async fn[Exec : Executable] spawn(Exec, Array[&Show], cwd? : &ToPath, stdin~ : ProcessInput = .., stdout~ : ProcessOutput = .., stderr~ : ProcessOutput = ..) -> Process!

fn[T] start(() -> T!) -> T!

let stderr : File

let stdin : File

let stdout : File

fn system() -> String!

// Types and methods
type File
impl Readable for File
impl Writable for File

type Iter[T]
async fn Iter::bytes(Self[@bytes.View]) -> Bytes!
async fn[T] Iter::collect(Self[T]) -> Array[T]!
async fn Iter::decode(Self[@bytes.View], encoding~ : @encoding.Encoding) -> Self[String]
async fn[T] Iter::each(Self[T], (T) -> Unit!) -> Unit!
async fn Iter::text(Self[@bytes.View], encoding~ : @encoding.Encoding = ..) -> String!

pub(all) enum OpenFlags {
  ReadOnly
  WriteOnly
  ReadWrite
}

type Path
fn Path::is_absolute(Self) -> Bool
fn[Other : ToPath] Path::relative_to(Self, Other) -> Self!
impl Eq for Path
impl @tonyfettes/uv.ToNtbs for Path
impl ToPath for Path

type Pipe
async fn Pipe::close(Self) -> Unit
fn Pipe::new(ipc~ : Bool = ..) -> Self!
impl Readable for Pipe
impl Writable for Pipe

type Process
fn Process::kill(Self, Signum) -> Unit!
async fn Process::signal(Self) -> Int
async fn Process::status(Self) -> Int

pub(all) enum ProcessInput {
  Ignore
  Stdin
  Pipe(Pipe)
  Inherit(File)
}

pub(all) enum ProcessOutput {
  Ignore
  Stdout
  Stderr
  Pipe(Pipe)
  Inherit(File)
}

pub(all) enum Signum {
  SIGHUP
  SIGINT
  SIGQUIT
  SIGABRT
  SIGTERM
  SIGWINCH
  SIGPIPE
}

type Stat
fn Stat::is_dir(Self) -> Bool
fn Stat::is_file(Self) -> Bool

pub type! SystemError {
  Exists
  IsDirectory
}

type Task[T]
fn[T] Task::new(() -> T!) -> Self[T]
async fn[T] Task::start(Self[T]) -> T!

async fn ToPath::access(&Self, read~ : Bool = .., write~ : Bool = .., execute~ : Bool = ..) -> Unit!
async fn[Target : ToPath] ToPath::copy_to(&Self, Target, recursive~ : Bool = .., overwrite~ : Bool = ..) -> Unit!
async fn ToPath::exists(&Self) -> Bool!
async fn ToPath::is_dir(&Self) -> Bool!
async fn ToPath::is_file(&Self) -> Bool!
async fn ToPath::iter(&Self) -> Iter[&Self]!
async fn ToPath::mkdir(&Self, mode~ : Int = ..) -> Unit!
async fn[Target : ToPath] ToPath::move_to(&Self, Target) -> Unit!
fn ToPath::name(&Self) -> String
async fn ToPath::read(&Self) -> Iter[@bytes.View]!
async fn ToPath::read_bytes(&Self) -> Bytes!
async fn ToPath::read_text(&Self, encoding~ : @encoding.Encoding = ..) -> String!
fn[Other : ToPath] ToPath::relative_to(&Self, Other) -> &Self!
async fn ToPath::remove(&Self, recursive~ : Bool = ..) -> Unit!
async fn ToPath::resolve(&Self) -> &Self!
async fn ToPath::rmdir(&Self) -> Unit!
async fn ToPath::stat(&Self) -> Stat!
async fn ToPath::unlink(&Self) -> Unit!
async fn ToPath::walk(&Self) -> Iter[&Self]!
async fn ToPath::write(&Self, Iter[@bytes.View]) -> Unit!
async fn ToPath::write_bytes(&Self, @bytes.View) -> Unit!
async fn ToPath::write_text(&Self, @string.StringView, encoding~ : @encoding.Encoding = ..) -> Unit!
impl Div for &ToPath
impl Eq for &ToPath
impl Show for &ToPath
impl ToJson for &ToPath
impl @json.FromJson for &ToPath

// Type aliases

// Traits
trait Executable
impl Executable for String
impl Executable for &ToPath

pub trait Readable {
  async read(Self) -> Iter[@bytes.View]!
  async read_text(Self, encoding~ : @encoding.Encoding) -> String!
  async read_bytes(Self) -> Bytes!
}
impl Readable for Bytes
impl Readable for @bytes.View

pub trait ToPath {
  to_path(Self) -> Path
}
impl ToPath for String
impl[T : ToPath] ToPath for Array[T]
impl ToPath for @string.StringView

pub trait Writable {
  async write(Self, Iter[@bytes.View]) -> Unit!
  async write_text(Self, @string.StringView, encoding~ : @encoding.Encoding) -> Unit!
  async write_bytes(Self, @bytes.View) -> Unit!
}
impl Writable for @buffer.T

