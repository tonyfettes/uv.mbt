package "tonyfettes/uv/async"

import(
  "moonbitlang/core/buffer"
  "moonbitlang/core/bytes"
  "moonbitlang/core/json"
  "moonbitlang/core/string"
  "tonyfettes/encoding"
)

// Values
fn args() -> Array[String]

async fn[T] backtrace(loc~ : SourceLoc = _, () -> T raise) -> T raise

fn cwd() -> Path raise

fn[ToPath : ToPath] path(ToPath) -> &ToPath

async fn[Exec : Executable] spawn(Exec, Array[@string.StringView], cwd? : &ToPath, stdin~ : ProcessInput = .., stdout~ : ProcessOutput = .., stderr~ : ProcessOutput = ..) -> Process raise

fn[T] start(() -> T raise) -> T raise

let stderr : File

let stdin : File

let stdout : File

fn system() -> String raise

// Types and methods
type File
async fn File::close(Self, loc~ : SourceLoc = _) -> Unit raise
impl Readable for File
impl Writable for File

pub enum FileType {
  File
  Directory
  Symlink
  Socket
  Fifo
  BlockDevice
  CharacterDevice
  Unknown
}

type Iter[T]
async fn[T, U] Iter::bind(Self[T], (T) -> U? raise?) -> Self[U]
async fn Iter::bytes(Self[@bytes.View]) -> Bytes raise
async fn[T] Iter::collect(Self[T]) -> Array[T] raise
async fn Iter::decode(Self[@bytes.View], encoding~ : @encoding.Encoding) -> Self[String]
async fn[T] Iter::each(Self[T], (T) -> Unit raise) -> Unit raise
async fn[T] Iter::filter(Self[T], (T) -> Bool raise?) -> Self[T]
async fn Iter::text(Self[@bytes.View], encoding~ : @encoding.Encoding = ..) -> String raise

type Path
async fn Path::access(Self, read~ : Bool = .., write~ : Bool = .., execute~ : Bool = .., loc~ : SourceLoc = _) -> Unit raise
fn Path::anchor(Self) -> @string.StringView
async fn[Target : ToPath] Path::copy_to(Self, Target, recursive~ : Bool = .., overwrite~ : Bool = .., loc~ : SourceLoc = _) -> Unit raise
fn Path::drive(Self) -> @string.StringView
async fn Path::exists(Self, loc~ : SourceLoc = _) -> Bool raise
async fn Path::is_dir(Self, loc~ : SourceLoc = _) -> Bool raise
async fn Path::is_file(Self) -> Bool raise
async fn Path::iter(Self) -> Iter[Self] raise
fn[ToPath : ToPath] Path::join(Self, ToPath) -> Self
async fn Path::mkdir(Self, mode~ : Int = .., loc~ : SourceLoc = _) -> Unit raise
async fn[Target : ToPath] Path::move_to(Self, Target, loc~ : SourceLoc = _) -> Unit raise
fn Path::name(Self) -> @string.StringView?
fn[ToPath : ToPath] Path::new(ToPath) -> Self
async fn Path::open(Self, loc~ : SourceLoc = _) -> File raise
fn Path::parent(Self) -> Self?
fn Path::parse(@string.StringView) -> Self
fn Path::parts(Self) -> ArrayView[@string.StringView]
fn Path::read(Self, loc~ : SourceLoc = _) -> Iter[@bytes.View] raise
fn[ToPath : ToPath] Path::relative_to(Self, ToPath) -> Self
async fn Path::remove(Self, recursive~ : Bool = .., loc~ : SourceLoc = _) -> Unit raise
async fn Path::resolve(Self, loc~ : SourceLoc = _) -> Self raise
async fn Path::rmdir(Self, loc~ : SourceLoc = _) -> Unit raise
fn Path::root(Self) -> @string.StringView
async fn Path::stat(Self, loc~ : SourceLoc = _) -> Stat raise
fn Path::suffix(Self) -> @string.StringView?
fn Path::to_posix_path(Self) -> Self
fn Path::to_windows_path(Self) -> Self
async fn Path::unlink(Self, loc~ : SourceLoc = _) -> Unit raise
async fn Path::walk(Self, loc~ : SourceLoc = _) -> Iter[Self] raise
async fn Path::write(Self, Iter[@bytes.View], loc~ : SourceLoc = _) -> Unit raise
impl Compare for Path
impl Eq for Path
impl Hash for Path
impl Show for Path
impl ToJson for Path
impl @json.FromJson for Path
impl Executable for Path
impl Readable for Path
impl ToPath for Path
impl Writable for Path

type Pipe
async fn Pipe::close(Self) -> Unit
fn Pipe::new(ipc~ : Bool = ..) -> Self raise
impl Readable for Pipe
impl Writable for Pipe

type Process
fn Process::kill(Self, Signum) -> Unit raise
async fn Process::signal(Self) -> Int
async fn Process::status(Self) -> Int

pub(all) enum ProcessInput {
  Ignore
  Stdin
  Pipe(Pipe)
  Inherit(File)
}

pub(all) enum ProcessOutput {
  Ignore
  Stdout
  Stderr
  Pipe(Pipe)
  Inherit(File)
}

pub(all) enum Signum {
  SIGHUP
  SIGINT
  SIGQUIT
  SIGABRT
  SIGTERM
  SIGWINCH
  SIGPIPE
}

type Stat
fn Stat::is_dir(Self) -> Bool
fn Stat::is_file(Self) -> Bool
fn Stat::type_(Self) -> FileType

// Type aliases

// Traits
trait Executable
impl Executable for String

pub trait Readable {
  async read(Self) -> Iter[@bytes.View] raise
  async read_text(Self, encoding~ : @encoding.Encoding) -> String raise
  async read_bytes(Self) -> Bytes raise
}
impl Readable for Bytes
impl Readable for @bytes.View

pub trait ToPath {
  to_path(Self) -> Path
}
impl ToPath for String
impl[T : ToPath] ToPath for Array[T]
impl[T : ToPath] ToPath for ArrayView[T]
impl ToPath for @string.StringView

pub trait Writable {
  async write(Self, Iter[@bytes.View]) -> Unit raise
  async write_text(Self, @string.StringView, encoding~ : @encoding.Encoding) -> Unit raise
  async write_bytes(Self, @bytes.View) -> Unit raise
}
impl Writable for @buffer.T

